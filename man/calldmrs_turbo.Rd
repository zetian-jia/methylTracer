% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calldmrs_turbo.R
\name{calldmrs_turbo}
\alias{calldmrs_turbo}
\title{Call DMRS Turbo}
\usage{
calldmrs_turbo(
  met_obj = NULL,
  p_threshold = 0.05,
  minlen = 50L,
  minCG = 3L,
  dis_merge = 100,
  pct_sig = 0.1,
  sep = 5000,
  case_group = NULL,
  ctrl_group = NULL
)
}
\arguments{
\item{met_obj}{A methylTracer object containing methylation data.}

\item{p_threshold}{p-value threshold for calling DMRs (default: 0.05).}

\item{minlen}{Minimum length of a DMR, in base pairs (default: 500).}

\item{minCG}{Minimum number of CG sites within a DMR (default: 3).}

\item{dis_merge}{Distance for merging DMRs (default: 200).}

\item{pct_sig}{Percentage of significant sites required for a DMR
to be considered significant (default: 0.1).}

\item{sep}{Window size for separating potential DMRs (default: 5000).}

\item{case_group}{The name of the case group in the methylation data
(default: 'case').}

\item{ctrl_group}{The name of the control group in the methylation data
(default: 'ctrl').}
}
\value{
A GRanges object containing the identified DMRs, which can be
saved or plotted. The GRanges object will include the genomic
coordinates and methylation statistics of the DMRs.
}
\description{
This function identifies Differentially Methylated Regions
(DMRs) based on methylation data using the turbo algorithm.
It calls DMRs by evaluating methylation differences between
case and control groups, applying various thresholds to
filter the results.
}
\details{
This function computes DMRs by first calculating the methylation
difference between case and control groups. It filters the results
based on various thresholds, including p-value, minimum length,
and the number of CG sites within a DMR. The final DMRs are merged
based on the specified distance threshold and can be visualized
or saved for further analysis.
}
\examples{
output_dir <- tempdir()

sam_info_df <- data.frame(
  sample_name = c(
    'sample_1.bed', 'sample_2.bed',
    'sample_3.bed', 'sample_4.bed',
    'sample_5.bed', 'sample_6.bed',
    'sample_7.bed', 'sample_8.bed'
  ),
  group = c(rep('case', 4), rep('ctrl', 4))
)
sam_info <- file.path(output_dir, 'sample_info.csv')

input_file_df <- data.frame(
  marker_name = c(
    'chr1_1000_2000', 'chr1_2000_3000',
    'chr1_3000_4000', 'chr1_4000_5000'
  ),
  sample_1.bed = c(100, 200, 600, 900),
  sample_2.bed = c(100, 200, 600, 900),
  sample_3.bed = c(100, 200, 600, 900),
  sample_4.bed = c(100, 200, 600, 900),
  sample_5.bed = c(800, 900, 100, 50),
  sample_6.bed = c(800, 900, 100, 50),
  sample_7.bed = c(800, 900, 100, 50),
  sample_8.bed = c(800, 900, 100, 50)
)
input_file <- file.path(output_dir, 'methylTracer_1kb.txt')

annotation_file_df <- data.frame(
  chr = rep('chr1', 4),
  start = c(1000, 2000, 3000, 4000),
  end = c(2000, 3000, 4000, 5000),
  SYMBOL = c('gene1', 'gene2', 'gene3', 'gene4'),
  marker_name = c(
    'chr1_1000_2000', 'chr1_2000_3000',
    'chr1_3000_4000', 'chr1_4000_5000'
  )
)
annotation_file <- file.path(output_dir, 'annotation.bed')

output_file <- 'methylTracer_obj_test.h5'

unlink(file.path(output_dir, output_file),
  recursive = TRUE
)

write.csv(sam_info_df, sam_info,
  row.names = FALSE
)
write.table(input_file_df, input_file,
  sep = '\t', row.names = FALSE
)
write.table(annotation_file_df, annotation_file,
  sep = '\t', row.names = FALSE
)

build_h5(
  sam_info = sam_info,
  input_file = input_file,
  output_dir = output_dir,
  output_file = output_file,
  annotation_file = annotation_file
)

met_obj <- build_met_obj(
  file.path(output_dir, output_file),
  sample_name = 'sample_name',
  marker_name = 'marker_name'
)

pre_res <- pre_calldmrs(
  met_obj = met_obj,
  group_colname = 'group',
  case_group = 'case',
  control_group = 'ctrl'
)
dmr_res <- calldmrs_turbo(
  met_obj = met_obj,
  p_threshold = 0.9,
  case_group = "case",
  ctrl_group = "ctrl"
)
}
